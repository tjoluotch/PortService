// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package portsprotobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortsResolverClient is the client API for PortsResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortsResolverClient interface {
	//    unary rpc call send port get back a result
	SendPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Result, error)
	// server side streaming. Send request get back multiple ports from DB
	GetPorts(ctx context.Context, in *Request, opts ...grpc.CallOption) (PortsResolver_GetPortsClient, error)
}

type portsResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewPortsResolverClient(cc grpc.ClientConnInterface) PortsResolverClient {
	return &portsResolverClient{cc}
}

func (c *portsResolverClient) SendPort(ctx context.Context, in *Port, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PortsResolver/SendPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsResolverClient) GetPorts(ctx context.Context, in *Request, opts ...grpc.CallOption) (PortsResolver_GetPortsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortsResolver_ServiceDesc.Streams[0], "/PortsResolver/GetPorts", opts...)
	if err != nil {
		return nil, err
	}
	x := &portsResolverGetPortsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortsResolver_GetPortsClient interface {
	Recv() (*Port, error)
	grpc.ClientStream
}

type portsResolverGetPortsClient struct {
	grpc.ClientStream
}

func (x *portsResolverGetPortsClient) Recv() (*Port, error) {
	m := new(Port)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortsResolverServer is the server API for PortsResolver service.
// All implementations must embed UnimplementedPortsResolverServer
// for forward compatibility
type PortsResolverServer interface {
	//    unary rpc call send port get back a result
	SendPort(context.Context, *Port) (*Result, error)
	// server side streaming. Send request get back multiple ports from DB
	GetPorts(*Request, PortsResolver_GetPortsServer) error
	mustEmbedUnimplementedPortsResolverServer()
}

// UnimplementedPortsResolverServer must be embedded to have forward compatible implementations.
type UnimplementedPortsResolverServer struct {
}

func (UnimplementedPortsResolverServer) SendPort(context.Context, *Port) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPort not implemented")
}
func (UnimplementedPortsResolverServer) GetPorts(*Request, PortsResolver_GetPortsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPorts not implemented")
}
func (UnimplementedPortsResolverServer) mustEmbedUnimplementedPortsResolverServer() {}

// UnsafePortsResolverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortsResolverServer will
// result in compilation errors.
type UnsafePortsResolverServer interface {
	mustEmbedUnimplementedPortsResolverServer()
}

func RegisterPortsResolverServer(s grpc.ServiceRegistrar, srv PortsResolverServer) {
	s.RegisterService(&PortsResolver_ServiceDesc, srv)
}

func _PortsResolver_SendPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsResolverServer).SendPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PortsResolver/SendPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsResolverServer).SendPort(ctx, req.(*Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortsResolver_GetPorts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortsResolverServer).GetPorts(m, &portsResolverGetPortsServer{stream})
}

type PortsResolver_GetPortsServer interface {
	Send(*Port) error
	grpc.ServerStream
}

type portsResolverGetPortsServer struct {
	grpc.ServerStream
}

func (x *portsResolverGetPortsServer) Send(m *Port) error {
	return x.ServerStream.SendMsg(m)
}

// PortsResolver_ServiceDesc is the grpc.ServiceDesc for PortsResolver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortsResolver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PortsResolver",
	HandlerType: (*PortsResolverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPort",
			Handler:    _PortsResolver_SendPort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPorts",
			Handler:       _PortsResolver_GetPorts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "portservice.proto",
}
